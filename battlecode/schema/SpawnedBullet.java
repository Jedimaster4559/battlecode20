// automatically generated by the FlatBuffers compiler, do not modify

package battlecode.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * A bullet that moves in a perfectly straight line.
 * Note: bullet location updates are not sent; a bullet is defined to be
 * in position loc + dt * vel after dt seconds.
 * This allows us some significant space savings, since there are lots
 * of bullets, and we don't need to send position updates.
 * The event stream will say if a bullet has been destroyed.
 */
public final class SpawnedBullet extends Table {
  public static SpawnedBullet getRootAsSpawnedBullet(ByteBuffer _bb) { return getRootAsSpawnedBullet(_bb, new SpawnedBullet()); }
  public static SpawnedBullet getRootAsSpawnedBullet(ByteBuffer _bb, SpawnedBullet obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public SpawnedBullet __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  /**
   * The numeric ID of the new Bullet.
   */
  public int ID() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  /**
   * The team of the new Bullet.
   */
  public int teamID() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  /**
   * The location of the Bullet, in meters from the center of the map.
   */
  public Vec loc() { return loc(new Vec()); }
  public Vec loc(Vec obj) { int o = __offset(8); return o != 0 ? obj.__init(o + bb_pos, bb) : null; }
  /**
   * The velocity of the Bullet, in meters PER SECOND (NOT per round).
   */
  public Vec vel() { return vel(new Vec()); }
  public Vec vel(Vec obj) { int o = __offset(10); return o != 0 ? obj.__init(o + bb_pos, bb) : null; }

  public static void startSpawnedBullet(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addID(FlatBufferBuilder builder, int ID) { builder.addShort(0, (short)ID, 0); }
  public static void addTeamID(FlatBufferBuilder builder, int teamID) { builder.addByte(1, (byte)teamID, 0); }
  public static void addLoc(FlatBufferBuilder builder, int locOffset) { builder.addStruct(2, locOffset, 0); }
  public static void addVel(FlatBufferBuilder builder, int velOffset) { builder.addStruct(3, velOffset, 0); }
  public static int endSpawnedBullet(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
};

