// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
*/
var battlecode = battlecode || {};

/**
 * @const
*/
battlecode.schema = battlecode.schema || {};

/**
 * The 'category' a Body falls into.
 * We can add more of these later.
 * It might make sense to encode these dynamically, the way we do teams; this
 * is simple and easy for now, though.
 *
 * @enum
 */
battlecode.schema.BodyType = {
  /**
   * A simple robot.
   */
  ROBOT: 0,

  /**
   * A sitting Body that cannot be destroyed.
   */
  RUBBLE: 1,

  /**
   * A bullet that moves in a perfectly straight line.
   * Note: bullet location updates are not sent; a bullet is defined to be
   * in position loc + dt * vel after dt seconds.
   * This allows us some significant space savings, since there are lots
   * of bullets, and we don't need to send position updates.
   * The event stream will say if a bullet has been destroyed.
   */
  BULLET: 2
};

/**
 * Types of bounds a map can have.
 *
 * @enum
 */
battlecode.schema.Bounds = {
  NONE: 0,
  RectangleBounds: 1,
  CircleBounds: 2
};

/**
 * An Event is a single step that needs to be processed.
 * A saved game simply consists of a long list of Events.
 * Events can be divided by either being sent separately (e.g. as separate
 * websocket messages), or by being wrapped with a GameWrapper.
 * A game consists of a series of matches; a match consists of a series of
 * rounds, and is played on a single map. Each round is a single simulation
 * step.
 *
 * @enum
 */
battlecode.schema.Event = {
  NONE: 0,

  /**
   * There should only be one GameHeader, at the start of the stream.
   */
  GameHeader: 1,

  /**
   * There should be one MatchHeader at the start of each match.
   */
  MatchHeader: 2,

  /**
   * A single simulation step. A round may be skipped if
   * nothing happens during its time.
   */
  Round: 3,

  /**
   * There should be one MatchFooter at the end of each simulation step.
   */
  MatchFooter: 4,

  /**
   * There should only be one GameFooter, at the end of the stream.
   */
  GameFooter: 5
};

/**
 * A vector in two-dimensional space. Continuous space, of course.
 * Defaults to the 0 vector.
 *
 * @constructor
 */
battlecode.schema.Vec = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.Vec}
 */
battlecode.schema.Vec.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
battlecode.schema.Vec.prototype.x = function() {
  return this.bb.readFloat32(this.bb_pos);
};

/**
 * @returns {number}
 */
battlecode.schema.Vec.prototype.y = function() {
  return this.bb.readFloat32(this.bb_pos + 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} x
 * @param {number} y
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Vec.createVec = function(builder, x, y) {
  builder.prep(4, 8);
  builder.writeFloat32(y);
  builder.writeFloat32(x);
  return builder.offset();
};

/**
 * A new Body to be placed on the map.
 *
 * @constructor
 */
battlecode.schema.SpawnedBody = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.SpawnedBody}
 */
battlecode.schema.SpawnedBody.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.SpawnedBody=} obj
 * @returns {battlecode.schema.SpawnedBody}
 */
battlecode.schema.SpawnedBody.getRootAsSpawnedBody = function(bb, obj) {
  return (obj || new battlecode.schema.SpawnedBody).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The numeric ID of the new Body.
 *
 * @returns {number}
 */
battlecode.schema.SpawnedBody.prototype.robotID = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
};

/**
 * The team of the new Body.
 *
 * @returns {number}
 */
battlecode.schema.SpawnedBody.prototype.teamID = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * The type of the new Body.
 *
 * @returns {battlecode.schema.BodyType}
 */
battlecode.schema.SpawnedBody.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? /** @type {battlecode.schema.BodyType} */ (this.bb.readUint8(this.bb_pos + offset)) : battlecode.schema.BodyType.ROBOT;
};

/**
 * The radius of the Body.
 *
 * @returns {number}
 */
battlecode.schema.SpawnedBody.prototype.radius = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0;
};

/**
 * The location of the Body, in meters from the center of the map.
 *
 * @param {battlecode.schema.Vec=} obj
 * @returns {battlecode.schema.Vec}
 */
battlecode.schema.SpawnedBody.prototype.loc = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? (obj || new battlecode.schema.Vec).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * The velocity of the Body, in meters PER SECOND (NOT per round).
 *
 * @param {battlecode.schema.Vec=} obj
 * @returns {battlecode.schema.Vec}
 */
battlecode.schema.SpawnedBody.prototype.vel = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? (obj || new battlecode.schema.Vec).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.SpawnedBody.startSpawnedBody = function(builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} robotID
 */
battlecode.schema.SpawnedBody.addRobotID = function(builder, robotID) {
  builder.addFieldInt16(0, robotID, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} teamID
 */
battlecode.schema.SpawnedBody.addTeamID = function(builder, teamID) {
  builder.addFieldInt8(1, teamID, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {battlecode.schema.BodyType} type
 */
battlecode.schema.SpawnedBody.addType = function(builder, type) {
  builder.addFieldInt8(2, type, battlecode.schema.BodyType.ROBOT);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} radius
 */
battlecode.schema.SpawnedBody.addRadius = function(builder, radius) {
  builder.addFieldFloat32(3, radius, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} locOffset
 */
battlecode.schema.SpawnedBody.addLoc = function(builder, locOffset) {
  builder.addFieldStruct(4, locOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} velOffset
 */
battlecode.schema.SpawnedBody.addVel = function(builder, velOffset) {
  builder.addFieldStruct(5, velOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.SpawnedBody.endSpawnedBody = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * A rectangular map.
 *
 * @constructor
 */
battlecode.schema.RectangleBounds = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.RectangleBounds}
 */
battlecode.schema.RectangleBounds.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.RectangleBounds=} obj
 * @returns {battlecode.schema.RectangleBounds}
 */
battlecode.schema.RectangleBounds.getRootAsRectangleBounds = function(bb, obj) {
  return (obj || new battlecode.schema.RectangleBounds).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
battlecode.schema.RectangleBounds.prototype.width = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.RectangleBounds.prototype.height = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.RectangleBounds.startRectangleBounds = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} width
 */
battlecode.schema.RectangleBounds.addWidth = function(builder, width) {
  builder.addFieldFloat32(0, width, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} height
 */
battlecode.schema.RectangleBounds.addHeight = function(builder, height) {
  builder.addFieldFloat32(1, height, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.RectangleBounds.endRectangleBounds = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * A circular map.
 *
 * @constructor
 */
battlecode.schema.CircleBounds = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.CircleBounds}
 */
battlecode.schema.CircleBounds.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.CircleBounds=} obj
 * @returns {battlecode.schema.CircleBounds}
 */
battlecode.schema.CircleBounds.getRootAsCircleBounds = function(bb, obj) {
  return (obj || new battlecode.schema.CircleBounds).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
battlecode.schema.CircleBounds.prototype.radius = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.CircleBounds.startCircleBounds = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} radius
 */
battlecode.schema.CircleBounds.addRadius = function(builder, radius) {
  builder.addFieldFloat32(0, radius, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.CircleBounds.endCircleBounds = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * The map a round is played on.
 *
 * @constructor
 */
battlecode.schema.Map = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.Map}
 */
battlecode.schema.Map.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.Map=} obj
 * @returns {battlecode.schema.Map}
 */
battlecode.schema.Map.getRootAsMap = function(bb, obj) {
  return (obj || new battlecode.schema.Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The name of a map.
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
battlecode.schema.Map.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * The number of simulation steps a map requires per second.
 * The time delta for a simulation step can be calculated as 
 * dt = 1s/stepsPerSecond.
 *
 * @returns {number}
 */
battlecode.schema.Map.prototype.stepsPerSecond = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 5;
};

/**
 * @returns {battlecode.schema.Bounds}
 */
battlecode.schema.Map.prototype.boundsType = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? /** @type {battlecode.schema.Bounds} */ (this.bb.readUint8(this.bb_pos + offset)) : battlecode.schema.Bounds.NONE;
};

/**
 * The bounds of the map.
 *
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
battlecode.schema.Map.prototype.bounds = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};

/**
 * The bodies on the map.
 *
 * @param {number} index
 * @param {battlecode.schema.SpawnedBody=} obj
 * @returns {battlecode.schema.SpawnedBody}
 */
battlecode.schema.Map.prototype.bodies = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? (obj || new battlecode.schema.SpawnedBody).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
battlecode.schema.Map.prototype.bodiesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.Map.startMap = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
battlecode.schema.Map.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} stepsPerSecond
 */
battlecode.schema.Map.addStepsPerSecond = function(builder, stepsPerSecond) {
  builder.addFieldInt8(1, stepsPerSecond, 5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {battlecode.schema.Bounds} boundsType
 */
battlecode.schema.Map.addBoundsType = function(builder, boundsType) {
  builder.addFieldInt8(2, boundsType, battlecode.schema.Bounds.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} boundsOffset
 */
battlecode.schema.Map.addBounds = function(builder, boundsOffset) {
  builder.addFieldOffset(3, boundsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} bodiesOffset
 */
battlecode.schema.Map.addBodies = function(builder, bodiesOffset) {
  builder.addFieldOffset(4, bodiesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Map.createBodiesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Map.startBodiesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Map.endMap = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Data relevant to a particular byte.
 *
 * @constructor
 */
battlecode.schema.TeamData = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.TeamData}
 */
battlecode.schema.TeamData.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.TeamData=} obj
 * @returns {battlecode.schema.TeamData}
 */
battlecode.schema.TeamData.getRootAsTeamData = function(bb, obj) {
  return (obj || new battlecode.schema.TeamData).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The name of the byte.
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
battlecode.schema.TeamData.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * The java package the byte uses.
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
battlecode.schema.TeamData.prototype.package = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * The ID of the team this data pertains to.
 *
 * @returns {number}
 */
battlecode.schema.TeamData.prototype.teamID = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.TeamData.startTeamData = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
battlecode.schema.TeamData.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} packageOffset
 */
battlecode.schema.TeamData.addPackage = function(builder, packageOffset) {
  builder.addFieldOffset(1, packageOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} teamID
 */
battlecode.schema.TeamData.addTeamID = function(builder, teamID) {
  builder.addFieldInt8(2, teamID, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.TeamData.endTeamData = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Necessary due to flatbuffers requiring events to be wrapped in tables.
 *
 * @constructor
 */
battlecode.schema.EventWrapper = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.EventWrapper}
 */
battlecode.schema.EventWrapper.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.EventWrapper=} obj
 * @returns {battlecode.schema.EventWrapper}
 */
battlecode.schema.EventWrapper.getRootAsEventWrapper = function(bb, obj) {
  return (obj || new battlecode.schema.EventWrapper).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {battlecode.schema.Event}
 */
battlecode.schema.EventWrapper.prototype.eType = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {battlecode.schema.Event} */ (this.bb.readUint8(this.bb_pos + offset)) : battlecode.schema.Event.NONE;
};

/**
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
battlecode.schema.EventWrapper.prototype.e = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.EventWrapper.startEventWrapper = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {battlecode.schema.Event} eType
 */
battlecode.schema.EventWrapper.addEType = function(builder, eType) {
  builder.addFieldInt8(0, eType, battlecode.schema.Event.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} eOffset
 */
battlecode.schema.EventWrapper.addE = function(builder, eOffset) {
  builder.addFieldOffset(1, eOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.EventWrapper.endEventWrapper = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * The first event sent in the game. Contains all metadata about the game.
 *
 * @constructor
 */
battlecode.schema.GameHeader = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.GameHeader}
 */
battlecode.schema.GameHeader.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.GameHeader=} obj
 * @returns {battlecode.schema.GameHeader}
 */
battlecode.schema.GameHeader.getRootAsGameHeader = function(bb, obj) {
  return (obj || new battlecode.schema.GameHeader).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The teams participating in the game.
 *
 * @param {number} index
 * @param {battlecode.schema.TeamData=} obj
 * @returns {battlecode.schema.TeamData}
 */
battlecode.schema.GameHeader.prototype.teams = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new battlecode.schema.TeamData).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
battlecode.schema.GameHeader.prototype.teamsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.GameHeader.startGameHeader = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} teamsOffset
 */
battlecode.schema.GameHeader.addTeams = function(builder, teamsOffset) {
  builder.addFieldOffset(0, teamsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameHeader.createTeamsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.GameHeader.startTeamsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameHeader.endGameHeader = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * The final event sent in the game.
 *
 * @constructor
 */
battlecode.schema.GameFooter = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.GameFooter}
 */
battlecode.schema.GameFooter.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.GameFooter=} obj
 * @returns {battlecode.schema.GameFooter}
 */
battlecode.schema.GameFooter.getRootAsGameFooter = function(bb, obj) {
  return (obj || new battlecode.schema.GameFooter).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The ID of the winning team of the game.
 *
 * @returns {number}
 */
battlecode.schema.GameFooter.prototype.winner = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.GameFooter.startGameFooter = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} winner
 */
battlecode.schema.GameFooter.addWinner = function(builder, winner) {
  builder.addFieldInt8(0, winner, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameFooter.endGameFooter = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Sent to start a match.
 *
 * @constructor
 */
battlecode.schema.MatchHeader = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.MatchHeader}
 */
battlecode.schema.MatchHeader.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.MatchHeader=} obj
 * @returns {battlecode.schema.MatchHeader}
 */
battlecode.schema.MatchHeader.getRootAsMatchHeader = function(bb, obj) {
  return (obj || new battlecode.schema.MatchHeader).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The map the match was played on.
 *
 * @param {battlecode.schema.Map=} obj
 * @returns {battlecode.schema.Map}
 */
battlecode.schema.MatchHeader.prototype.map = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new battlecode.schema.Map).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @returns {number}
 */
battlecode.schema.MatchHeader.prototype.maxRounds = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.MatchHeader.startMatchHeader = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} mapOffset
 */
battlecode.schema.MatchHeader.addMap = function(builder, mapOffset) {
  builder.addFieldOffset(0, mapOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} maxRounds
 */
battlecode.schema.MatchHeader.addMaxRounds = function(builder, maxRounds) {
  builder.addFieldInt32(1, maxRounds, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.MatchHeader.endMatchHeader = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * Sent to end a match.
 *
 * @constructor
 */
battlecode.schema.MatchFooter = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.MatchFooter}
 */
battlecode.schema.MatchFooter.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.MatchFooter=} obj
 * @returns {battlecode.schema.MatchFooter}
 */
battlecode.schema.MatchFooter.getRootAsMatchFooter = function(bb, obj) {
  return (obj || new battlecode.schema.MatchFooter).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
battlecode.schema.MatchFooter.prototype.winner = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.MatchFooter.prototype.totalRounds = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.MatchFooter.startMatchFooter = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} winner
 */
battlecode.schema.MatchFooter.addWinner = function(builder, winner) {
  builder.addFieldInt8(0, winner, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} totalRounds
 */
battlecode.schema.MatchFooter.addTotalRounds = function(builder, totalRounds) {
  builder.addFieldInt32(1, totalRounds, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.MatchFooter.endMatchFooter = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * A single time-step in a Game.
 * The bulk of the data in the file is stored in tables like this.
 * Note that a struct-of-arrays format is more space efficient than an array-
 * of-structs.
 *
 * @constructor
 */
battlecode.schema.Round = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.Round}
 */
battlecode.schema.Round.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.Round=} obj
 * @returns {battlecode.schema.Round}
 */
battlecode.schema.Round.getRootAsRound = function(bb, obj) {
  return (obj || new battlecode.schema.Round).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * Turns since the start of a match. Rounds may be skipped, so this
 * is useful.
 *
 * @returns {number}
 */
battlecode.schema.Round.prototype.number = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * The IDs of bodies that moved.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.movedIDs = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.movedIDsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * The new locations of bodies that have moved. They are defined to be in
 * their new locations at exactly the time round.number*dt.
 *
 * @param {number} index
 * @param {battlecode.schema.Vec=} obj
 * @returns {battlecode.schema.Vec}
 */
battlecode.schema.Round.prototype.movedLocs = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new battlecode.schema.Vec).__init(this.bb.__vector(this.bb_pos + offset) + index * 8, this.bb) : null;
};

/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.movedLocsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * New bodies. They come into existence at round.number*dt.
 *
 * @param {number} index
 * @param {battlecode.schema.SpawnedBody=} obj
 * @returns {battlecode.schema.SpawnedBody}
 */
battlecode.schema.Round.prototype.spawned = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new battlecode.schema.SpawnedBody).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.spawnedLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * The IDs of bodies that died. They died at round.number*dt.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.diedIDs = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.diedIDsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.Round.startRound = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} number
 */
battlecode.schema.Round.addNumber = function(builder, number) {
  builder.addFieldInt32(0, number, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} movedIDsOffset
 */
battlecode.schema.Round.addMovedIDs = function(builder, movedIDsOffset) {
  builder.addFieldOffset(1, movedIDsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createMovedIDsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startMovedIDsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} movedLocsOffset
 */
battlecode.schema.Round.addMovedLocs = function(builder, movedLocsOffset) {
  builder.addFieldOffset(2, movedLocsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startMovedLocsVector = function(builder, numElems) {
  builder.startVector(8, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} spawnedOffset
 */
battlecode.schema.Round.addSpawned = function(builder, spawnedOffset) {
  builder.addFieldOffset(3, spawnedOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createSpawnedVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startSpawnedVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} diedIDsOffset
 */
battlecode.schema.Round.addDiedIDs = function(builder, diedIDsOffset) {
  builder.addFieldOffset(4, diedIDsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createDiedIDsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startDiedIDsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.endRound = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * If events are not otherwise delimited, this wrapper structure
 * allows a game to be stored in a single buffer.
 * The first event will be a GameHeader; the last event will be a GameFooter.
 * matchHeaders[0] is the index of the 0th match header in the event stream,
 * corresponding to matchFooters[0]. These indices allow quick traversal of
 * the file.
 *
 * @constructor
 */
battlecode.schema.GameWrapper = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.GameWrapper}
 */
battlecode.schema.GameWrapper.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.GameWrapper=} obj
 * @returns {battlecode.schema.GameWrapper}
 */
battlecode.schema.GameWrapper.getRootAsGameWrapper = function(bb, obj) {
  return (obj || new battlecode.schema.GameWrapper).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The series of events comprising the game.
 *
 * @param {number} index
 * @param {battlecode.schema.EventWrapper=} obj
 * @returns {battlecode.schema.EventWrapper}
 */
battlecode.schema.GameWrapper.prototype.events = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new battlecode.schema.EventWrapper).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
battlecode.schema.GameWrapper.prototype.eventsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * The indices of the headers of the matches, in order.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.GameWrapper.prototype.matchHeaders = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.GameWrapper.prototype.matchHeadersLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * The indices of the footers of the matches, in order.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.GameWrapper.prototype.matchFooters = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
battlecode.schema.GameWrapper.prototype.matchFootersLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.GameWrapper.startGameWrapper = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} eventsOffset
 */
battlecode.schema.GameWrapper.addEvents = function(builder, eventsOffset) {
  builder.addFieldOffset(0, eventsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameWrapper.createEventsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.GameWrapper.startEventsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} matchHeadersOffset
 */
battlecode.schema.GameWrapper.addMatchHeaders = function(builder, matchHeadersOffset) {
  builder.addFieldOffset(1, matchHeadersOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameWrapper.createMatchHeadersVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.GameWrapper.startMatchHeadersVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} matchFootersOffset
 */
battlecode.schema.GameWrapper.addMatchFooters = function(builder, matchFootersOffset) {
  builder.addFieldOffset(2, matchFootersOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameWrapper.createMatchFootersVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.GameWrapper.startMatchFootersVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameWrapper.endGameWrapper = function(builder) {
  var offset = builder.endObject();
  return offset;
};

// Exports for Node.js and RequireJS
this.battlecode = battlecode;
