<?xml version="1.0"?>

<project name="Battlecode Player"
        xmlns:ivy="antlib:org.apache.ivy.ant"
        default="compile">

	<property file="build.conf"/>

    <property name="rootname" value="battlecode-player"/>
    <property name="src.dir" value="${basedir}/src/main"/>
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="build.dir" value="${basedir}/build"/>
    <property name="build.encoding" value="UTF-8"/>
    <property name="build.jar" value="${basedir}/${rootname}.jar"/>

    <property name="pkg.build.jar" value="${basedir}/${rootname}.jar"/>
    <property name="pkg.build.dir" value="${build.dir}/classes"/>

    <property name="javac.debug" value="on"/>
    <property name="javac.optimize" value="on"/>
    <property name="javac.deprecation" value="off"/>
    <property name="javac.version" value="1.7"/>
    <property name="javac.args" value=""/>
    <property name="javac.args.warnings" value="-Xlint:unchecked"/>

    <property name="javadoc.destdir" value="docs/api"/>
		

    <!-- Unit tests -->
    <property name="test.src.dir" value="${basedir}/src/test"/>
    <property name="test.timeout" value="900000"/>
    <property name="test.build.dir" value="${build.dir}/tests"/>
    <property name="test.build.jar" value="${basedir}/${rootname}-test.jar"/>
    <property name="test.report.file" value="TEST-AllTestSuite"/>
    <property name="instr.build.dir" value="${build.dir}/instrumented-classes"/>
    <property name="instr.datafile" value="${build.dir}/cobertura.ser"/>

    <!-- IVY configuration items -->
    <property name="ivy.install.version" value="2.1.0"/>
    <condition property="ivy.home" value="${env.IVY_HOME}">
        <isset property="env.IVY_HOME"/>
    </condition>
    <property name="ivy.home" value="${user.home}/.ant"/>
    <property name="ivy.jar.dir" value="${ivy.home}/lib"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>
    <property name="ivy.remote.jar" value="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"/>
	<condition property="ivy.exists">
		<resourceexists>
			<file file="${ivy.jar.file}"/>
		</resourceexists>
	</condition>

    <!-- the normal classpath -->
    <path id="classpath-libs">
        <fileset dir="${lib.dir}"><include name="**/*.jar"/></fileset>
    </path>
  
    <path id="classpath-test">
        <pathelement location="${basedir}/${rootname}.jar"/>
    </path>
  
    <path id="classpath-compiled">
        <pathelement location="${pkg.build.dir}"/>
    </path>
  
    <path id="classpath-coverage">
        <pathelement location="${instr.build.dir}"/>
    </path>

   <target name="download-ivy">
        <mkdir dir="${ivy.jar.dir}"/>
        <get dest="${ivy.jar.file}"
                usetimestamp="true"
                src="${ivy.remote.jar}"/>
    </target>

    <target name="init-ivy">
        <!-- try to load ivy here from ivy home, in case the user has not
        already dropped it into ant's lib dir (note that the latter copy will
        always take precedence).  We will not fail as long as local lib dir
        exists (it may be empty) and ivy is in at least one of ant's lib dir or
        the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                uri="antlib:org.apache.ivy.ant"
                classpathref="ivy.lib.path"/>
    </target>

	<target name="retrieve" depends="init,init-ivy">
        <ivy:settings file="ivyconf.xml"/>
        <ivy:retrieve/>
	</target>

    <target name="init">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${pkg.build.dir}"/>
        <mkdir dir="${test.build.dir}"/>
    </target>

<target name="clean"
            description="Clean up build directory and Ivy libraries.">
        <delete dir="${build.dir}"/>
        <delete dir="${javadoc.destdir}"/>
        <delete file="${build.jar}"/>
        <delete file="${test.build.jar}"/>
        <delete file="${test.report.file}.xml"/>
    </target>

    <target name="compile"
            description="Compile Battlecode classes."
            depends="init">
		<!--
		<taskdef resource="scala/tools/ant/antlib.xml">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="scala-*.jar"/>
				</fileset>
			</classpath>
		</taskdef>
	
		<scalac encoding="${build.encoding}"
                srcdir="${src.dir}"
                destdir="${pkg.build.dir}"
                target="jvm-1.5"
                deprecation="${javac.deprecation}"
				classpathref="classpath-libs">
			<include name="**/*.scala"/>
			<include name="**/*.java"/>
		</scalac>
		-->
		<javac encoding="${build.encoding}"
				srcdir="${src.dir}"
				includes="${player.includes}"
				excludes="${player.excludes}"
				destdir="${pkg.build.dir}"
				debug="${javac.debug}"
				optimize="${javac.optimize}"
				target="${javac.version}"
				source="${javac.version}"
				deprecation="${javac.deprecation}"
				includeantruntime="false">
				<compilerarg line="${javac.args} ${javac.args.warnings}"/>
				<classpath refid="classpath-libs"/>
		</javac>

</target>

	<target name="proguard-check" depends="init">
		<fileset id="players.files" dir="${pkg.build.dir}" includes="${release.players}"/>
		<pathconvert property="any-players" refid="players.files" setonempty="false"/>
	</target>

	<target name="proguard-run" depends="jar" if="any-players">
		<taskdef resource="proguard/ant/task.properties">
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="proguard-*.jar"/>
				</fileset>
			</classpath>
		</taskdef>
		<proguard configuration="battlecode-player.pro"/>
	</target>

	<!-- proguard gives an error if we give it an empty jar file, so
		 just copy instead -->
	<target name="proguard-copy" depends="jar" unless="any-players">
		<copy file="battlecode-player.jar" tofile="proguard/battlecode-player.jar"/>
	</target>

	<target name="proguard" depends="proguard-check,proguard-run,proguard-copy"/>

    <target name="jar"
            description="Build the jar (with dependencies included)."
            depends="compile">
        <jar jarfile="${pkg.build.jar}" basedir="${pkg.build.dir}" includes="${release.players}">
        </jar>
    </target>

    <!-- ========== TESTING ========= -->


    <target name="doc">
        <javadoc destdir="${javadoc.destdir}"
                author="true"
                version="true"
                use="true"
                windowtitle="Battlecode Server API">
        <packageset dir="${src.dir}" defaultexcludes="yes"/>
        <doctitle><![CDATA[<h1>Battlecode Server</h1>]]></doctitle>
        <bottom>
            <![CDATA[
            <i>Copyright &#169; 2006-2010 Battlecode. All Rights Reserved.</i>
            ]]>
        </bottom>
        <tag name="todo" scope="all" description="To do:"/>
        <link href="http://java.sun.com/j2se/1.6.0/docs/api/"/>
        </javadoc>
    </target>

</project>
