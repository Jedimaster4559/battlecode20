// automatically generated by the FlatBuffers compiler, do not modify
/**
 * @const
 * @namespace
 */
var battlecode = battlecode || {};
/**
 * @const
 * @namespace
 */
battlecode.schema = battlecode.schema || {};
/**
 * The possible types of things that can exist.
 * Note that neutral trees and bullets are not treated as bodies.
 *
 * @enum {number}
 */
battlecode.schema.BodyType = {
    /**
     * Miners extract crude soup and bring it to the refineries.
     */
    MINER: 0,
    /**
     * Landscapers take dirt from adjacent (decreasing the elevation)
     * squares or deposit dirt onto adjacent squares, including
     * into water (increasing the elevation).
     */
    LANDSCAPER: 1,
    /**
     * Drones pick up any unit and drop them somewhere else.
     */
    DRONE: 2,
    /**
     * Net guns shoot down drones.
     */
    NET_GUN: 3,
    /**
     * Cows produce polution.
     */
    COW: 4,
    /**
     * Refineries turn crude soup into refined soup, and produce pollution.
     */
    REFINERY: 5,
    /**
     * Vaporators reduce pollution.
     */
    VAPORATOR: 6,
    HQ: 7,
    /**
     * Design schools create landscapers.
     */
    DESIGN_SCHOOL: 8,
    /**
     * Fulfillment centers create drones.
     */
    FULFILLMENT_CENTER: 9
};
/**
 * The possible types of things that can exist.
 * Note that neutral trees and bullets are not treated as bodies.
 *
 * @enum {string}
 */
battlecode.schema.BodyTypeName = {
    /**
     * Miners extract crude soup and bring it to the refineries.
     */
    '0': 'MINER',
    /**
     * Landscapers take dirt from adjacent (decreasing the elevation)
     * squares or deposit dirt onto adjacent squares, including
     * into water (increasing the elevation).
     */
    '1': 'LANDSCAPER',
    /**
     * Drones pick up any unit and drop them somewhere else.
     */
    '2': 'DRONE',
    /**
     * Net guns shoot down drones.
     */
    '3': 'NET_GUN',
    /**
     * Cows produce polution.
     */
    '4': 'COW',
    /**
     * Refineries turn crude soup into refined soup, and produce pollution.
     */
    '5': 'REFINERY',
    /**
     * Vaporators reduce pollution.
     */
    '6': 'VAPORATOR',
    '7': 'HQ',
    /**
     * Design schools create landscapers.
     */
    '8': 'DESIGN_SCHOOL',
    /**
     * Fulfillment centers create drones.
     */
    '9': 'FULFILLMENT_CENTER'
};
/**
 * Actions that can be performed.
 * Purely aesthetic; have no actual effect on simulation.
 * (Although the simulation may want to track the 'parents' of
 * particular robots.)
 * Actions may have 'targets', which are the units on which
 * the actions were performed.
 *
 * @enum {number}
 */
battlecode.schema.Action = {
    /**
     * Mines a unit of soup.
     * Target: tile.
     */
    MINE_SOUP: 0,
    /**
     * Refines a unit of soup.
     * Target: refinery.
     */
    REFINE_SOUP: 1,
    /**
     * Digs a unit of dirt.
     * Target: tile.
     */
    DIG_DIRT: 2,
    /**
     * Deposits a unit of dirt.
     * Target: tile.
     */
    DEPOSIT_DIRT: 3,
    /**
     * Picks up a unit.
     * Target: unit picked up.
     */
    PICK_UNIT: 4,
    /**
     * Drops off a unit.
     * Target: unit dropped off.
     */
    DROP_UNIT: 5,
    /**
     * Shoots a drone.
     * Target: drone shot.
     */
    SHOOT: 6,
    /**
     * Dies from drowning.
     * Target: none.
     */
    DIE_DROWN: 7,
    /**
     * Dies from being shot (drones only).
     * Target: none.
     */
    DIE_SHOT: 8
};
/**
 * Actions that can be performed.
 * Purely aesthetic; have no actual effect on simulation.
 * (Although the simulation may want to track the 'parents' of
 * particular robots.)
 * Actions may have 'targets', which are the units on which
 * the actions were performed.
 *
 * @enum {string}
 */
battlecode.schema.ActionName = {
    /**
     * Mines a unit of soup.
     * Target: tile.
     */
    '0': 'MINE_SOUP',
    /**
     * Refines a unit of soup.
     * Target: refinery.
     */
    '1': 'REFINE_SOUP',
    /**
     * Digs a unit of dirt.
     * Target: tile.
     */
    '2': 'DIG_DIRT',
    /**
     * Deposits a unit of dirt.
     * Target: tile.
     */
    '3': 'DEPOSIT_DIRT',
    /**
     * Picks up a unit.
     * Target: unit picked up.
     */
    '4': 'PICK_UNIT',
    /**
     * Drops off a unit.
     * Target: unit dropped off.
     */
    '5': 'DROP_UNIT',
    /**
     * Shoots a drone.
     * Target: drone shot.
     */
    '6': 'SHOOT',
    /**
     * Dies from drowning.
     * Target: none.
     */
    '7': 'DIE_DROWN',
    /**
     * Dies from being shot (drones only).
     * Target: none.
     */
    '8': 'DIE_SHOT'
};
/**
 * An Event is a single step that needs to be processed.
 * A saved game simply consists of a long list of Events.
 * Events can be divided by either being sent separately (e.g. as separate
 * websocket messages), or by being wrapped with a GameWrapper.
 * A game consists of a series of matches; a match consists of a series of
 * rounds, and is played on a single map. Each round is a single simulation
 * step.
 *
 * @enum {number}
 */
battlecode.schema.Event = {
    NONE: 0,
    /**
     * There should only be one GameHeader, at the start of the stream.
     */
    GameHeader: 1,
    /**
     * There should be one MatchHeader at the start of each match.
     */
    MatchHeader: 2,
    /**
     * A single simulation step. A round may be skipped if
     * nothing happens during its time.
     */
    Round: 3,
    /**
     * There should be one MatchFooter at the end of each simulation step.
     */
    MatchFooter: 4,
    /**
     * There should only be one GameFooter, at the end of the stream.
     */
    GameFooter: 5
};
/**
 * An Event is a single step that needs to be processed.
 * A saved game simply consists of a long list of Events.
 * Events can be divided by either being sent separately (e.g. as separate
 * websocket messages), or by being wrapped with a GameWrapper.
 * A game consists of a series of matches; a match consists of a series of
 * rounds, and is played on a single map. Each round is a single simulation
 * step.
 *
 * @enum {string}
 */
battlecode.schema.EventName = {
    '0': 'NONE',
    /**
     * There should only be one GameHeader, at the start of the stream.
     */
    '1': 'GameHeader',
    /**
     * There should be one MatchHeader at the start of each match.
     */
    '2': 'MatchHeader',
    /**
     * A single simulation step. A round may be skipped if
     * nothing happens during its time.
     */
    '3': 'Round',
    /**
     * There should be one MatchFooter at the end of each simulation step.
     */
    '4': 'MatchFooter',
    /**
     * There should only be one GameFooter, at the end of the stream.
     */
    '5': 'GameFooter'
};
/**
 * A vector in three-dimensional space. Discrete space, of course.
 * Defaults to the 0 vector.
 *
 * @constructor
 */
battlecode.schema.Vec = function () {
    /**
     * @type {flatbuffers.ByteBuffer}
     */
    this.bb = null;
    /**
     * @type {number}
     */
    this.bb_pos = 0;
};
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.Vec}
 */
battlecode.schema.Vec.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
};
/**
 * @returns {number}
 */
battlecode.schema.Vec.prototype.x = function () {
    return this.bb.readInt32(this.bb_pos);
};
/**
 * @returns {number}
 */
battlecode.schema.Vec.prototype.y = function () {
    return this.bb.readInt32(this.bb_pos + 4);
};
/**
 * @returns {number}
 */
battlecode.schema.Vec.prototype.z = function () {
    return this.bb.readInt32(this.bb_pos + 8);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Vec.createVec = function (builder, x, y, z) {
    builder.prep(4, 12);
    builder.writeInt32(z);
    builder.writeInt32(y);
    builder.writeInt32(x);
    return builder.offset();
};
/**
 * A table of vectors.
 *
 * @constructor
 */
battlecode.schema.VecTable = function () {
    /**
     * @type {flatbuffers.ByteBuffer}
     */
    this.bb = null;
    /**
     * @type {number}
     */
    this.bb_pos = 0;
};
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.VecTable}
 */
battlecode.schema.VecTable.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.VecTable=} obj
 * @returns {battlecode.schema.VecTable}
 */
battlecode.schema.VecTable.getRootAsVecTable = function (bb, obj) {
    return (obj || new battlecode.schema.VecTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.VecTable=} obj
 * @returns {battlecode.schema.VecTable}
 */
battlecode.schema.VecTable.getSizePrefixedRootAsVecTable = function (bb, obj) {
    return (obj || new battlecode.schema.VecTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.VecTable.prototype.xs = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};
/**
 * @returns {number}
 */
battlecode.schema.VecTable.prototype.xsLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @returns {Int32Array}
 */
battlecode.schema.VecTable.prototype.xsArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};
/**
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.VecTable.prototype.ys = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};
/**
 * @returns {number}
 */
battlecode.schema.VecTable.prototype.ysLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @returns {Int32Array}
 */
battlecode.schema.VecTable.prototype.ysArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};
/**
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.VecTable.prototype.zs = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};
/**
 * @returns {number}
 */
battlecode.schema.VecTable.prototype.zsLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @returns {Int32Array}
 */
battlecode.schema.VecTable.prototype.zsArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};
/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.VecTable.startVecTable = function (builder) {
    builder.startObject(3);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} xsOffset
 */
battlecode.schema.VecTable.addXs = function (builder, xsOffset) {
    builder.addFieldOffset(0, xsOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.VecTable.createXsVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addInt32(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.VecTable.startXsVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} ysOffset
 */
battlecode.schema.VecTable.addYs = function (builder, ysOffset) {
    builder.addFieldOffset(1, ysOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.VecTable.createYsVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addInt32(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.VecTable.startYsVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} zsOffset
 */
battlecode.schema.VecTable.addZs = function (builder, zsOffset) {
    builder.addFieldOffset(2, zsOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.VecTable.createZsVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addInt32(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.VecTable.startZsVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.VecTable.endVecTable = function (builder) {
    var offset = builder.endObject();
    return offset;
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} xsOffset
 * @param {flatbuffers.Offset} ysOffset
 * @param {flatbuffers.Offset} zsOffset
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.VecTable.createVecTable = function (builder, xsOffset, ysOffset, zsOffset) {
    battlecode.schema.VecTable.startVecTable(builder);
    battlecode.schema.VecTable.addXs(builder, xsOffset);
    battlecode.schema.VecTable.addYs(builder, ysOffset);
    battlecode.schema.VecTable.addZs(builder, zsOffset);
    return battlecode.schema.VecTable.endVecTable(builder);
};
/**
 * A table of RGB values.
 *
 * @constructor
 */
battlecode.schema.RGBTable = function () {
    /**
     * @type {flatbuffers.ByteBuffer}
     */
    this.bb = null;
    /**
     * @type {number}
     */
    this.bb_pos = 0;
};
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.RGBTable}
 */
battlecode.schema.RGBTable.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.RGBTable=} obj
 * @returns {battlecode.schema.RGBTable}
 */
battlecode.schema.RGBTable.getRootAsRGBTable = function (bb, obj) {
    return (obj || new battlecode.schema.RGBTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.RGBTable=} obj
 * @returns {battlecode.schema.RGBTable}
 */
battlecode.schema.RGBTable.getSizePrefixedRootAsRGBTable = function (bb, obj) {
    return (obj || new battlecode.schema.RGBTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.RGBTable.prototype.red = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};
/**
 * @returns {number}
 */
battlecode.schema.RGBTable.prototype.redLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @returns {Int32Array}
 */
battlecode.schema.RGBTable.prototype.redArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};
/**
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.RGBTable.prototype.green = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};
/**
 * @returns {number}
 */
battlecode.schema.RGBTable.prototype.greenLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @returns {Int32Array}
 */
battlecode.schema.RGBTable.prototype.greenArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};
/**
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.RGBTable.prototype.blue = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};
/**
 * @returns {number}
 */
battlecode.schema.RGBTable.prototype.blueLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @returns {Int32Array}
 */
battlecode.schema.RGBTable.prototype.blueArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};
/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.RGBTable.startRGBTable = function (builder) {
    builder.startObject(3);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} redOffset
 */
battlecode.schema.RGBTable.addRed = function (builder, redOffset) {
    builder.addFieldOffset(0, redOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.RGBTable.createRedVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addInt32(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.RGBTable.startRedVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} greenOffset
 */
battlecode.schema.RGBTable.addGreen = function (builder, greenOffset) {
    builder.addFieldOffset(1, greenOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.RGBTable.createGreenVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addInt32(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.RGBTable.startGreenVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} blueOffset
 */
battlecode.schema.RGBTable.addBlue = function (builder, blueOffset) {
    builder.addFieldOffset(2, blueOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.RGBTable.createBlueVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addInt32(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.RGBTable.startBlueVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.RGBTable.endRGBTable = function (builder) {
    var offset = builder.endObject();
    return offset;
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} redOffset
 * @param {flatbuffers.Offset} greenOffset
 * @param {flatbuffers.Offset} blueOffset
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.RGBTable.createRGBTable = function (builder, redOffset, greenOffset, blueOffset) {
    battlecode.schema.RGBTable.startRGBTable(builder);
    battlecode.schema.RGBTable.addRed(builder, redOffset);
    battlecode.schema.RGBTable.addGreen(builder, greenOffset);
    battlecode.schema.RGBTable.addBlue(builder, blueOffset);
    return battlecode.schema.RGBTable.endRGBTable(builder);
};
/**
 * A list of new bodies to be placed on the map.
 *
 * @constructor
 */
battlecode.schema.SpawnedBodyTable = function () {
    /**
     * @type {flatbuffers.ByteBuffer}
     */
    this.bb = null;
    /**
     * @type {number}
     */
    this.bb_pos = 0;
};
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.SpawnedBodyTable}
 */
battlecode.schema.SpawnedBodyTable.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.SpawnedBodyTable=} obj
 * @returns {battlecode.schema.SpawnedBodyTable}
 */
battlecode.schema.SpawnedBodyTable.getRootAsSpawnedBodyTable = function (bb, obj) {
    return (obj || new battlecode.schema.SpawnedBodyTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.SpawnedBodyTable=} obj
 * @returns {battlecode.schema.SpawnedBodyTable}
 */
battlecode.schema.SpawnedBodyTable.getSizePrefixedRootAsSpawnedBodyTable = function (bb, obj) {
    return (obj || new battlecode.schema.SpawnedBodyTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * The numeric ID of the new bodies.
 * Will never be negative.
 * There will only be one body with a particular ID at a time.
 * So, there will never be two robots with the same ID, or a robot and
 * a building with the same ID.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.SpawnedBodyTable.prototype.robotIDs = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};
/**
 * @returns {number}
 */
battlecode.schema.SpawnedBodyTable.prototype.robotIDsLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @returns {Int32Array}
 */
battlecode.schema.SpawnedBodyTable.prototype.robotIDsArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};
/**
 * The teams of the new bodies.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.SpawnedBodyTable.prototype.teamIDs = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
};
/**
 * @returns {number}
 */
battlecode.schema.SpawnedBodyTable.prototype.teamIDsLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @returns {Int8Array}
 */
battlecode.schema.SpawnedBodyTable.prototype.teamIDsArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};
/**
 * The types of the new bodies.
 *
 * @param {number} index
 * @returns {battlecode.schema.BodyType}
 */
battlecode.schema.SpawnedBodyTable.prototype.types = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? /** @type {battlecode.schema.BodyType} */ (this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index)) : /** @type {battlecode.schema.BodyType} */ (0);
};
/**
 * @returns {number}
 */
battlecode.schema.SpawnedBodyTable.prototype.typesLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @returns {Int8Array}
 */
battlecode.schema.SpawnedBodyTable.prototype.typesArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};
/**
 * The locations of the bodies.
 *
 * @param {battlecode.schema.VecTable=} obj
 * @returns {battlecode.schema.VecTable|null}
 */
battlecode.schema.SpawnedBodyTable.prototype.locs = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 10);
    return offset ? (obj || new battlecode.schema.VecTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};
/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.SpawnedBodyTable.startSpawnedBodyTable = function (builder) {
    builder.startObject(4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} robotIDsOffset
 */
battlecode.schema.SpawnedBodyTable.addRobotIDs = function (builder, robotIDsOffset) {
    builder.addFieldOffset(0, robotIDsOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.SpawnedBodyTable.createRobotIDsVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addInt32(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.SpawnedBodyTable.startRobotIDsVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} teamIDsOffset
 */
battlecode.schema.SpawnedBodyTable.addTeamIDs = function (builder, teamIDsOffset) {
    builder.addFieldOffset(1, teamIDsOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.SpawnedBodyTable.createTeamIDsVector = function (builder, data) {
    builder.startVector(1, data.length, 1);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addInt8(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.SpawnedBodyTable.startTeamIDsVector = function (builder, numElems) {
    builder.startVector(1, numElems, 1);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} typesOffset
 */
battlecode.schema.SpawnedBodyTable.addTypes = function (builder, typesOffset) {
    builder.addFieldOffset(2, typesOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<battlecode.schema.BodyType>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.SpawnedBodyTable.createTypesVector = function (builder, data) {
    builder.startVector(1, data.length, 1);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addInt8(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.SpawnedBodyTable.startTypesVector = function (builder, numElems) {
    builder.startVector(1, numElems, 1);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} locsOffset
 */
battlecode.schema.SpawnedBodyTable.addLocs = function (builder, locsOffset) {
    builder.addFieldOffset(3, locsOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.SpawnedBodyTable.endSpawnedBodyTable = function (builder) {
    var offset = builder.endObject();
    return offset;
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} robotIDsOffset
 * @param {flatbuffers.Offset} teamIDsOffset
 * @param {flatbuffers.Offset} typesOffset
 * @param {flatbuffers.Offset} locsOffset
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.SpawnedBodyTable.createSpawnedBodyTable = function (builder, robotIDsOffset, teamIDsOffset, typesOffset, locsOffset) {
    battlecode.schema.SpawnedBodyTable.startSpawnedBodyTable(builder);
    battlecode.schema.SpawnedBodyTable.addRobotIDs(builder, robotIDsOffset);
    battlecode.schema.SpawnedBodyTable.addTeamIDs(builder, teamIDsOffset);
    battlecode.schema.SpawnedBodyTable.addTypes(builder, typesOffset);
    battlecode.schema.SpawnedBodyTable.addLocs(builder, locsOffset);
    return battlecode.schema.SpawnedBodyTable.endSpawnedBodyTable(builder);
};
/**
 * The map a round is played on.
 *
 * @constructor
 */
battlecode.schema.GameMap = function () {
    /**
     * @type {flatbuffers.ByteBuffer}
     */
    this.bb = null;
    /**
     * @type {number}
     */
    this.bb_pos = 0;
};
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.GameMap}
 */
battlecode.schema.GameMap.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.GameMap=} obj
 * @returns {battlecode.schema.GameMap}
 */
battlecode.schema.GameMap.getRootAsGameMap = function (bb, obj) {
    return (obj || new battlecode.schema.GameMap).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.GameMap=} obj
 * @returns {battlecode.schema.GameMap}
 */
battlecode.schema.GameMap.getSizePrefixedRootAsGameMap = function (bb, obj) {
    return (obj || new battlecode.schema.GameMap).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * The name of a map.
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
battlecode.schema.GameMap.prototype.name = function (optionalEncoding) {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};
/**
 * The bottom corner of the map.
 *
 * @param {battlecode.schema.Vec=} obj
 * @returns {battlecode.schema.Vec|null}
 */
battlecode.schema.GameMap.prototype.minCorner = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? (obj || new battlecode.schema.Vec).__init(this.bb_pos + offset, this.bb) : null;
};
/**
 * The top corner of the map.
 *
 * @param {battlecode.schema.Vec=} obj
 * @returns {battlecode.schema.Vec|null}
 */
battlecode.schema.GameMap.prototype.maxCorner = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? (obj || new battlecode.schema.Vec).__init(this.bb_pos + offset, this.bb) : null;
};
/**
 * The bodies on the map.
 *
 * @param {battlecode.schema.SpawnedBodyTable=} obj
 * @returns {battlecode.schema.SpawnedBodyTable|null}
 */
battlecode.schema.GameMap.prototype.bodies = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 10);
    return offset ? (obj || new battlecode.schema.SpawnedBodyTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};
/**
 * The random seed of the map.
 *
 * @returns {number}
 */
battlecode.schema.GameMap.prototype.randomSeed = function () {
    var offset = this.bb.__offset(this.bb_pos, 12);
    return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};
/**
 * The tiles
 *
 * @param {number} index
 * @param {battlecode.schema.Tile=} obj
 * @returns {battlecode.schema.Tile}
 */
battlecode.schema.GameMap.prototype.tiles = function (index, obj) {
    var offset = this.bb.__offset(this.bb_pos, 14);
    return offset ? (obj || new battlecode.schema.Tile).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};
/**
 * @returns {number}
 */
battlecode.schema.GameMap.prototype.tilesLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 14);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.GameMap.startGameMap = function (builder) {
    builder.startObject(6);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
battlecode.schema.GameMap.addName = function (builder, nameOffset) {
    builder.addFieldOffset(0, nameOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} minCornerOffset
 */
battlecode.schema.GameMap.addMinCorner = function (builder, minCornerOffset) {
    builder.addFieldStruct(1, minCornerOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} maxCornerOffset
 */
battlecode.schema.GameMap.addMaxCorner = function (builder, maxCornerOffset) {
    builder.addFieldStruct(2, maxCornerOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} bodiesOffset
 */
battlecode.schema.GameMap.addBodies = function (builder, bodiesOffset) {
    builder.addFieldOffset(3, bodiesOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} randomSeed
 */
battlecode.schema.GameMap.addRandomSeed = function (builder, randomSeed) {
    builder.addFieldInt32(4, randomSeed, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} tilesOffset
 */
battlecode.schema.GameMap.addTiles = function (builder, tilesOffset) {
    builder.addFieldOffset(5, tilesOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameMap.createTilesVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addOffset(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.GameMap.startTilesVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameMap.endGameMap = function (builder) {
    var offset = builder.endObject();
    return offset;
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 * @param {flatbuffers.Offset} minCornerOffset
 * @param {flatbuffers.Offset} maxCornerOffset
 * @param {flatbuffers.Offset} bodiesOffset
 * @param {number} randomSeed
 * @param {flatbuffers.Offset} tilesOffset
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameMap.createGameMap = function (builder, nameOffset, minCornerOffset, maxCornerOffset, bodiesOffset, randomSeed, tilesOffset) {
    battlecode.schema.GameMap.startGameMap(builder);
    battlecode.schema.GameMap.addName(builder, nameOffset);
    battlecode.schema.GameMap.addMinCorner(builder, minCornerOffset);
    battlecode.schema.GameMap.addMaxCorner(builder, maxCornerOffset);
    battlecode.schema.GameMap.addBodies(builder, bodiesOffset);
    battlecode.schema.GameMap.addRandomSeed(builder, randomSeed);
    battlecode.schema.GameMap.addTiles(builder, tilesOffset);
    return battlecode.schema.GameMap.endGameMap(builder);
};
/**
 * A tile.
 *
 * @constructor
 */
battlecode.schema.Tile = function () {
    /**
     * @type {flatbuffers.ByteBuffer}
     */
    this.bb = null;
    /**
     * @type {number}
     */
    this.bb_pos = 0;
};
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.Tile}
 */
battlecode.schema.Tile.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.Tile=} obj
 * @returns {battlecode.schema.Tile}
 */
battlecode.schema.Tile.getRootAsTile = function (bb, obj) {
    return (obj || new battlecode.schema.Tile).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.Tile=} obj
 * @returns {battlecode.schema.Tile}
 */
battlecode.schema.Tile.getSizePrefixedRootAsTile = function (bb, obj) {
    return (obj || new battlecode.schema.Tile).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * @returns {number}
 */
battlecode.schema.Tile.prototype.dirt = function () {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};
/**
 * The water level on the tile (above the dirt).
 *
 * @returns {number}
 */
battlecode.schema.Tile.prototype.water = function () {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};
/**
 * The polluion level of the tiles.
 *
 * @returns {number}
 */
battlecode.schema.Tile.prototype.pollution = function () {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};
/**
 * The amount of crude soup to be mined on the tiles.
 *
 * @returns {number}
 */
battlecode.schema.Tile.prototype.soup = function () {
    var offset = this.bb.__offset(this.bb_pos, 10);
    return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};
/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.Tile.startTile = function (builder) {
    builder.startObject(4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} dirt
 */
battlecode.schema.Tile.addDirt = function (builder, dirt) {
    builder.addFieldInt32(0, dirt, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} water
 */
battlecode.schema.Tile.addWater = function (builder, water) {
    builder.addFieldInt32(1, water, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} pollution
 */
battlecode.schema.Tile.addPollution = function (builder, pollution) {
    builder.addFieldInt32(2, pollution, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} soup
 */
battlecode.schema.Tile.addSoup = function (builder, soup) {
    builder.addFieldInt32(3, soup, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Tile.endTile = function (builder) {
    var offset = builder.endObject();
    return offset;
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} dirt
 * @param {number} water
 * @param {number} pollution
 * @param {number} soup
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Tile.createTile = function (builder, dirt, water, pollution, soup) {
    battlecode.schema.Tile.startTile(builder);
    battlecode.schema.Tile.addDirt(builder, dirt);
    battlecode.schema.Tile.addWater(builder, water);
    battlecode.schema.Tile.addPollution(builder, pollution);
    battlecode.schema.Tile.addSoup(builder, soup);
    return battlecode.schema.Tile.endTile(builder);
};
/**
 * Metadata about all bodies of a particular type.
 *
 * @constructor
 */
battlecode.schema.BodyTypeMetadata = function () {
    /**
     * @type {flatbuffers.ByteBuffer}
     */
    this.bb = null;
    /**
     * @type {number}
     */
    this.bb_pos = 0;
};
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.BodyTypeMetadata}
 */
battlecode.schema.BodyTypeMetadata.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.BodyTypeMetadata=} obj
 * @returns {battlecode.schema.BodyTypeMetadata}
 */
battlecode.schema.BodyTypeMetadata.getRootAsBodyTypeMetadata = function (bb, obj) {
    return (obj || new battlecode.schema.BodyTypeMetadata).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.BodyTypeMetadata=} obj
 * @returns {battlecode.schema.BodyTypeMetadata}
 */
battlecode.schema.BodyTypeMetadata.getSizePrefixedRootAsBodyTypeMetadata = function (bb, obj) {
    return (obj || new battlecode.schema.BodyTypeMetadata).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * The relevant type.
 *
 * @returns {battlecode.schema.BodyType}
 */
battlecode.schema.BodyTypeMetadata.prototype.type = function () {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? /** @type {battlecode.schema.BodyType} */ (this.bb.readInt8(this.bb_pos + offset)) : battlecode.schema.BodyType.MINER;
};
/**
 * The cost of the type, in refined soup.
 *
 * @returns {number}
 */
battlecode.schema.BodyTypeMetadata.prototype.cost = function () {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};
/**
 * The maximum distance this type can move each turn
 *
 * @returns {number}
 */
battlecode.schema.BodyTypeMetadata.prototype.strideRadius = function () {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};
/**
 * The maximum distance this type can sense other trees and robots
 *
 * @returns {number}
 */
battlecode.schema.BodyTypeMetadata.prototype.sightRadius = function () {
    var offset = this.bb.__offset(this.bb_pos, 10);
    return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};
/**
 * need to encode the formula
 * TODO
 * Amount of soup this body type can carry; only positive for miners.
 *
 * @returns {number}
 */
battlecode.schema.BodyTypeMetadata.prototype.soupLimit = function () {
    var offset = this.bb.__offset(this.bb_pos, 12);
    return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};
/**
 * Amount of dirt this body type can carry; only positive for landscapers.
 *
 * @returns {number}
 */
battlecode.schema.BodyTypeMetadata.prototype.dirtLimit = function () {
    var offset = this.bb.__offset(this.bb_pos, 14);
    return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};
/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.BodyTypeMetadata.startBodyTypeMetadata = function (builder) {
    builder.startObject(6);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {battlecode.schema.BodyType} type
 */
battlecode.schema.BodyTypeMetadata.addType = function (builder, type) {
    builder.addFieldInt8(0, type, battlecode.schema.BodyType.MINER);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} cost
 */
battlecode.schema.BodyTypeMetadata.addCost = function (builder, cost) {
    builder.addFieldFloat32(1, cost, 0.0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} strideRadius
 */
battlecode.schema.BodyTypeMetadata.addStrideRadius = function (builder, strideRadius) {
    builder.addFieldInt32(2, strideRadius, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} sightRadius
 */
battlecode.schema.BodyTypeMetadata.addSightRadius = function (builder, sightRadius) {
    builder.addFieldInt32(3, sightRadius, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} soupLimit
 */
battlecode.schema.BodyTypeMetadata.addSoupLimit = function (builder, soupLimit) {
    builder.addFieldInt32(4, soupLimit, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} dirtLimit
 */
battlecode.schema.BodyTypeMetadata.addDirtLimit = function (builder, dirtLimit) {
    builder.addFieldInt32(5, dirtLimit, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.BodyTypeMetadata.endBodyTypeMetadata = function (builder) {
    var offset = builder.endObject();
    return offset;
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {battlecode.schema.BodyType} type
 * @param {number} cost
 * @param {number} strideRadius
 * @param {number} sightRadius
 * @param {number} soupLimit
 * @param {number} dirtLimit
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.BodyTypeMetadata.createBodyTypeMetadata = function (builder, type, cost, strideRadius, sightRadius, soupLimit, dirtLimit) {
    battlecode.schema.BodyTypeMetadata.startBodyTypeMetadata(builder);
    battlecode.schema.BodyTypeMetadata.addType(builder, type);
    battlecode.schema.BodyTypeMetadata.addCost(builder, cost);
    battlecode.schema.BodyTypeMetadata.addStrideRadius(builder, strideRadius);
    battlecode.schema.BodyTypeMetadata.addSightRadius(builder, sightRadius);
    battlecode.schema.BodyTypeMetadata.addSoupLimit(builder, soupLimit);
    battlecode.schema.BodyTypeMetadata.addDirtLimit(builder, dirtLimit);
    return battlecode.schema.BodyTypeMetadata.endBodyTypeMetadata(builder);
};
/**
 * Data relevant to a particular team.
 *
 * @constructor
 */
battlecode.schema.TeamData = function () {
    /**
     * @type {flatbuffers.ByteBuffer}
     */
    this.bb = null;
    /**
     * @type {number}
     */
    this.bb_pos = 0;
};
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.TeamData}
 */
battlecode.schema.TeamData.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.TeamData=} obj
 * @returns {battlecode.schema.TeamData}
 */
battlecode.schema.TeamData.getRootAsTeamData = function (bb, obj) {
    return (obj || new battlecode.schema.TeamData).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.TeamData=} obj
 * @returns {battlecode.schema.TeamData}
 */
battlecode.schema.TeamData.getSizePrefixedRootAsTeamData = function (bb, obj) {
    return (obj || new battlecode.schema.TeamData).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * The name of the team.
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
battlecode.schema.TeamData.prototype.name = function (optionalEncoding) {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};
/**
 * The java package the team uses.
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
battlecode.schema.TeamData.prototype.packageName = function (optionalEncoding) {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};
/**
 * The ID of the team this data pertains to.
 *
 * @returns {number}
 */
battlecode.schema.TeamData.prototype.teamID = function () {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
};
/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.TeamData.startTeamData = function (builder) {
    builder.startObject(3);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
battlecode.schema.TeamData.addName = function (builder, nameOffset) {
    builder.addFieldOffset(0, nameOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} packageNameOffset
 */
battlecode.schema.TeamData.addPackageName = function (builder, packageNameOffset) {
    builder.addFieldOffset(1, packageNameOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} teamID
 */
battlecode.schema.TeamData.addTeamID = function (builder, teamID) {
    builder.addFieldInt8(2, teamID, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.TeamData.endTeamData = function (builder) {
    var offset = builder.endObject();
    return offset;
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 * @param {flatbuffers.Offset} packageNameOffset
 * @param {number} teamID
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.TeamData.createTeamData = function (builder, nameOffset, packageNameOffset, teamID) {
    battlecode.schema.TeamData.startTeamData(builder);
    battlecode.schema.TeamData.addName(builder, nameOffset);
    battlecode.schema.TeamData.addPackageName(builder, packageNameOffset);
    battlecode.schema.TeamData.addTeamID(builder, teamID);
    return battlecode.schema.TeamData.endTeamData(builder);
};
/**
 * The first event sent in the game. Contains all metadata about the game.
 *
 * @constructor
 */
battlecode.schema.GameHeader = function () {
    /**
     * @type {flatbuffers.ByteBuffer}
     */
    this.bb = null;
    /**
     * @type {number}
     */
    this.bb_pos = 0;
};
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.GameHeader}
 */
battlecode.schema.GameHeader.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.GameHeader=} obj
 * @returns {battlecode.schema.GameHeader}
 */
battlecode.schema.GameHeader.getRootAsGameHeader = function (bb, obj) {
    return (obj || new battlecode.schema.GameHeader).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.GameHeader=} obj
 * @returns {battlecode.schema.GameHeader}
 */
battlecode.schema.GameHeader.getSizePrefixedRootAsGameHeader = function (bb, obj) {
    return (obj || new battlecode.schema.GameHeader).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * The version of the spec this game complies with.
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
battlecode.schema.GameHeader.prototype.specVersion = function (optionalEncoding) {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};
/**
 * The teams participating in the game.
 *
 * @param {number} index
 * @param {battlecode.schema.TeamData=} obj
 * @returns {battlecode.schema.TeamData}
 */
battlecode.schema.GameHeader.prototype.teams = function (index, obj) {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? (obj || new battlecode.schema.TeamData).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};
/**
 * @returns {number}
 */
battlecode.schema.GameHeader.prototype.teamsLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * Information about all body types in the game.
 *
 * @param {number} index
 * @param {battlecode.schema.BodyTypeMetadata=} obj
 * @returns {battlecode.schema.BodyTypeMetadata}
 */
battlecode.schema.GameHeader.prototype.bodyTypeMetadata = function (index, obj) {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? (obj || new battlecode.schema.BodyTypeMetadata).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};
/**
 * @returns {number}
 */
battlecode.schema.GameHeader.prototype.bodyTypeMetadataLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.GameHeader.startGameHeader = function (builder) {
    builder.startObject(3);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} specVersionOffset
 */
battlecode.schema.GameHeader.addSpecVersion = function (builder, specVersionOffset) {
    builder.addFieldOffset(0, specVersionOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} teamsOffset
 */
battlecode.schema.GameHeader.addTeams = function (builder, teamsOffset) {
    builder.addFieldOffset(1, teamsOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameHeader.createTeamsVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addOffset(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.GameHeader.startTeamsVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} bodyTypeMetadataOffset
 */
battlecode.schema.GameHeader.addBodyTypeMetadata = function (builder, bodyTypeMetadataOffset) {
    builder.addFieldOffset(2, bodyTypeMetadataOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameHeader.createBodyTypeMetadataVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addOffset(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.GameHeader.startBodyTypeMetadataVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameHeader.endGameHeader = function (builder) {
    var offset = builder.endObject();
    return offset;
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} specVersionOffset
 * @param {flatbuffers.Offset} teamsOffset
 * @param {flatbuffers.Offset} bodyTypeMetadataOffset
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameHeader.createGameHeader = function (builder, specVersionOffset, teamsOffset, bodyTypeMetadataOffset) {
    battlecode.schema.GameHeader.startGameHeader(builder);
    battlecode.schema.GameHeader.addSpecVersion(builder, specVersionOffset);
    battlecode.schema.GameHeader.addTeams(builder, teamsOffset);
    battlecode.schema.GameHeader.addBodyTypeMetadata(builder, bodyTypeMetadataOffset);
    return battlecode.schema.GameHeader.endGameHeader(builder);
};
/**
 * The final event sent in the game.
 *
 * @constructor
 */
battlecode.schema.GameFooter = function () {
    /**
     * @type {flatbuffers.ByteBuffer}
     */
    this.bb = null;
    /**
     * @type {number}
     */
    this.bb_pos = 0;
};
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.GameFooter}
 */
battlecode.schema.GameFooter.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.GameFooter=} obj
 * @returns {battlecode.schema.GameFooter}
 */
battlecode.schema.GameFooter.getRootAsGameFooter = function (bb, obj) {
    return (obj || new battlecode.schema.GameFooter).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.GameFooter=} obj
 * @returns {battlecode.schema.GameFooter}
 */
battlecode.schema.GameFooter.getSizePrefixedRootAsGameFooter = function (bb, obj) {
    return (obj || new battlecode.schema.GameFooter).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * The ID of the winning team of the game.
 *
 * @returns {number}
 */
battlecode.schema.GameFooter.prototype.winner = function () {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
};
/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.GameFooter.startGameFooter = function (builder) {
    builder.startObject(1);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} winner
 */
battlecode.schema.GameFooter.addWinner = function (builder, winner) {
    builder.addFieldInt8(0, winner, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameFooter.endGameFooter = function (builder) {
    var offset = builder.endObject();
    return offset;
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} winner
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameFooter.createGameFooter = function (builder, winner) {
    battlecode.schema.GameFooter.startGameFooter(builder);
    battlecode.schema.GameFooter.addWinner(builder, winner);
    return battlecode.schema.GameFooter.endGameFooter(builder);
};
/**
 * Sent to start a match.
 *
 * @constructor
 */
battlecode.schema.MatchHeader = function () {
    /**
     * @type {flatbuffers.ByteBuffer}
     */
    this.bb = null;
    /**
     * @type {number}
     */
    this.bb_pos = 0;
};
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.MatchHeader}
 */
battlecode.schema.MatchHeader.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.MatchHeader=} obj
 * @returns {battlecode.schema.MatchHeader}
 */
battlecode.schema.MatchHeader.getRootAsMatchHeader = function (bb, obj) {
    return (obj || new battlecode.schema.MatchHeader).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.MatchHeader=} obj
 * @returns {battlecode.schema.MatchHeader}
 */
battlecode.schema.MatchHeader.getSizePrefixedRootAsMatchHeader = function (bb, obj) {
    return (obj || new battlecode.schema.MatchHeader).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * The map the match was played on.
 *
 * @param {battlecode.schema.GameMap=} obj
 * @returns {battlecode.schema.GameMap|null}
 */
battlecode.schema.MatchHeader.prototype.map = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? (obj || new battlecode.schema.GameMap).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};
/**
 * The maximum number of rounds in this match.
 *
 * @returns {number}
 */
battlecode.schema.MatchHeader.prototype.maxRounds = function () {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};
/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.MatchHeader.startMatchHeader = function (builder) {
    builder.startObject(2);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} mapOffset
 */
battlecode.schema.MatchHeader.addMap = function (builder, mapOffset) {
    builder.addFieldOffset(0, mapOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} maxRounds
 */
battlecode.schema.MatchHeader.addMaxRounds = function (builder, maxRounds) {
    builder.addFieldInt32(1, maxRounds, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.MatchHeader.endMatchHeader = function (builder) {
    var offset = builder.endObject();
    return offset;
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} mapOffset
 * @param {number} maxRounds
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.MatchHeader.createMatchHeader = function (builder, mapOffset, maxRounds) {
    battlecode.schema.MatchHeader.startMatchHeader(builder);
    battlecode.schema.MatchHeader.addMap(builder, mapOffset);
    battlecode.schema.MatchHeader.addMaxRounds(builder, maxRounds);
    return battlecode.schema.MatchHeader.endMatchHeader(builder);
};
/**
 * Sent to end a match.
 *
 * @constructor
 */
battlecode.schema.MatchFooter = function () {
    /**
     * @type {flatbuffers.ByteBuffer}
     */
    this.bb = null;
    /**
     * @type {number}
     */
    this.bb_pos = 0;
};
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.MatchFooter}
 */
battlecode.schema.MatchFooter.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.MatchFooter=} obj
 * @returns {battlecode.schema.MatchFooter}
 */
battlecode.schema.MatchFooter.getRootAsMatchFooter = function (bb, obj) {
    return (obj || new battlecode.schema.MatchFooter).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.MatchFooter=} obj
 * @returns {battlecode.schema.MatchFooter}
 */
battlecode.schema.MatchFooter.getSizePrefixedRootAsMatchFooter = function (bb, obj) {
    return (obj || new battlecode.schema.MatchFooter).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * The ID of the winning team.
 *
 * @returns {number}
 */
battlecode.schema.MatchFooter.prototype.winner = function () {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
};
/**
 * The number of rounds played.
 *
 * @returns {number}
 */
battlecode.schema.MatchFooter.prototype.totalRounds = function () {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};
/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.MatchFooter.startMatchFooter = function (builder) {
    builder.startObject(2);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} winner
 */
battlecode.schema.MatchFooter.addWinner = function (builder, winner) {
    builder.addFieldInt8(0, winner, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} totalRounds
 */
battlecode.schema.MatchFooter.addTotalRounds = function (builder, totalRounds) {
    builder.addFieldInt32(1, totalRounds, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.MatchFooter.endMatchFooter = function (builder) {
    var offset = builder.endObject();
    return offset;
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} winner
 * @param {number} totalRounds
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.MatchFooter.createMatchFooter = function (builder, winner, totalRounds) {
    battlecode.schema.MatchFooter.startMatchFooter(builder);
    battlecode.schema.MatchFooter.addWinner(builder, winner);
    battlecode.schema.MatchFooter.addTotalRounds(builder, totalRounds);
    return battlecode.schema.MatchFooter.endMatchFooter(builder);
};
/**
 * A single time-step in a Game.
 * The bulk of the data in the file is stored in tables like this.
 * Note that a struct-of-arrays format is more space efficient than an array-
 * of-structs.
 *
 * @constructor
 */
battlecode.schema.Round = function () {
    /**
     * @type {flatbuffers.ByteBuffer}
     */
    this.bb = null;
    /**
     * @type {number}
     */
    this.bb_pos = 0;
};
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.Round}
 */
battlecode.schema.Round.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.Round=} obj
 * @returns {battlecode.schema.Round}
 */
battlecode.schema.Round.getRootAsRound = function (bb, obj) {
    return (obj || new battlecode.schema.Round).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.Round=} obj
 * @returns {battlecode.schema.Round}
 */
battlecode.schema.Round.getSizePrefixedRootAsRound = function (bb, obj) {
    return (obj || new battlecode.schema.Round).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * The IDs of teams in the Game.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.teamIDs = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};
/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.teamIDsLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @returns {Int32Array}
 */
battlecode.schema.Round.prototype.teamIDsArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};
/**
 * The refined soup counts of the teams.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.teamSoup = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};
/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.teamSoupLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @returns {Int32Array}
 */
battlecode.schema.Round.prototype.teamSoupArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};
/**
 * The IDs of bodies that moved.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.movedIDs = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};
/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.movedIDsLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @returns {Int32Array}
 */
battlecode.schema.Round.prototype.movedIDsArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};
/**
 * The new locations of bodies that have moved.
 *
 * @param {battlecode.schema.VecTable=} obj
 * @returns {battlecode.schema.VecTable|null}
 */
battlecode.schema.Round.prototype.movedLocs = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 10);
    return offset ? (obj || new battlecode.schema.VecTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};
/**
 * New bodies.
 *
 * @param {battlecode.schema.SpawnedBodyTable=} obj
 * @returns {battlecode.schema.SpawnedBodyTable|null}
 */
battlecode.schema.Round.prototype.spawnedBodies = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 12);
    return offset ? (obj || new battlecode.schema.SpawnedBodyTable).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};
/**
 * The indexes of locations with changed pollution.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.pollutionChangedLocs = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 14);
    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};
/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.pollutionChangedLocsLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 14);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @returns {Int32Array}
 */
battlecode.schema.Round.prototype.pollutionChangedLocsArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 14);
    return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};
/**
 * The new pollution levels of bodies with changed pollution.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.pollutionChangeLevels = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 16);
    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};
/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.pollutionChangeLevelsLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 16);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @returns {Int32Array}
 */
battlecode.schema.Round.prototype.pollutionChangeLevelsArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 16);
    return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};
/**
 * The IDs of bodies that died (drowned units and shot drones).
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.diedIDs = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 18);
    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};
/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.diedIDsLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 18);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @returns {Int32Array}
 */
battlecode.schema.Round.prototype.diedIDsArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 18);
    return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};
/**
 * The IDs of robots that performed actions.
 * IDs may repeat.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.actionIDs = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 20);
    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};
/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.actionIDsLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 20);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @returns {Int32Array}
 */
battlecode.schema.Round.prototype.actionIDsArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 20);
    return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};
/**
 * The actions performed.
 *
 * @param {number} index
 * @returns {battlecode.schema.Action}
 */
battlecode.schema.Round.prototype.actions = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 22);
    return offset ? /** @type {battlecode.schema.Action} */ (this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index)) : /** @type {battlecode.schema.Action} */ (0);
};
/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.actionsLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 22);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @returns {Int8Array}
 */
battlecode.schema.Round.prototype.actionsArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 22);
    return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};
/**
 * The 'targets' of the performed actions. Actions without targets may have
 * any target (typically 0).
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.actionTargets = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 24);
    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};
/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.actionTargetsLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 24);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @returns {Int32Array}
 */
battlecode.schema.Round.prototype.actionTargetsArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 24);
    return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};
/**
 * All logs sent this round.
 * Messages from a particular robot in this round start on a new line, and
 * have a header:
 * '[' $TEAM ':' $ROBOTTYPE '#' $ID '@' $ROUND '] '
 * $TEAM = 'A' | 'B'
 * $ROBOTTYPE = 'ARCHON' | 'GARDENER' | 'LUMBERJACK'
 *            | 'SOLDIER' | 'TANK' | 'SCOUT' | other names...
 * $ID = a number
 * $ROUND = a number
 * The header is not necessarily followed by a newline.
 * This header should only be sent once per robot per round (although
 * players may forge it, so don't crash if you get strange input.)
 *
 * You should try to only read this value once, and cache it. Reading
 * strings from a flatbuffer is much less efficient than reading other
 * buffers, because they need to be copied into an environment-provided
 * buffer and validated.
 *
 * (haha i guess you can never really escape string parsing can you)
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
battlecode.schema.Round.prototype.logs = function (optionalEncoding) {
    var offset = this.bb.__offset(this.bb_pos, 26);
    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};
/**
 * Potential message pool.
 *
 * @param {number} index
 * @param {battlecode.schema.Message=} obj
 * @returns {battlecode.schema.Message}
 */
battlecode.schema.Round.prototype.pool = function (index, obj) {
    var offset = this.bb.__offset(this.bb_pos, 28);
    return offset ? (obj || new battlecode.schema.Message).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};
/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.poolLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 28);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * The first sent Round in a match should have index 1. (The starting state,
 * created by the MatchHeader, can be thought to have index 0.)
 * It should increase by one for each following round.
 *
 * @returns {number}
 */
battlecode.schema.Round.prototype.roundID = function () {
    var offset = this.bb.__offset(this.bb_pos, 30);
    return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};
/**
 * The IDs of player bodies.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.bytecodeIDs = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 32);
    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};
/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.bytecodeIDsLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 32);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @returns {Int32Array}
 */
battlecode.schema.Round.prototype.bytecodeIDsArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 32);
    return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};
/**
 * The bytecodes used by the player bodies.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Round.prototype.bytecodesUsed = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 34);
    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};
/**
 * @returns {number}
 */
battlecode.schema.Round.prototype.bytecodesUsedLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 34);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @returns {Int32Array}
 */
battlecode.schema.Round.prototype.bytecodesUsedArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 34);
    return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};
/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.Round.startRound = function (builder) {
    builder.startObject(16);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} teamIDsOffset
 */
battlecode.schema.Round.addTeamIDs = function (builder, teamIDsOffset) {
    builder.addFieldOffset(0, teamIDsOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createTeamIDsVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addInt32(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startTeamIDsVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} teamSoupOffset
 */
battlecode.schema.Round.addTeamSoup = function (builder, teamSoupOffset) {
    builder.addFieldOffset(1, teamSoupOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createTeamSoupVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addInt32(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startTeamSoupVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} movedIDsOffset
 */
battlecode.schema.Round.addMovedIDs = function (builder, movedIDsOffset) {
    builder.addFieldOffset(2, movedIDsOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createMovedIDsVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addInt32(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startMovedIDsVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} movedLocsOffset
 */
battlecode.schema.Round.addMovedLocs = function (builder, movedLocsOffset) {
    builder.addFieldOffset(3, movedLocsOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} spawnedBodiesOffset
 */
battlecode.schema.Round.addSpawnedBodies = function (builder, spawnedBodiesOffset) {
    builder.addFieldOffset(4, spawnedBodiesOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} pollutionChangedLocsOffset
 */
battlecode.schema.Round.addPollutionChangedLocs = function (builder, pollutionChangedLocsOffset) {
    builder.addFieldOffset(5, pollutionChangedLocsOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createPollutionChangedLocsVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addInt32(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startPollutionChangedLocsVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} pollutionChangeLevelsOffset
 */
battlecode.schema.Round.addPollutionChangeLevels = function (builder, pollutionChangeLevelsOffset) {
    builder.addFieldOffset(6, pollutionChangeLevelsOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createPollutionChangeLevelsVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addInt32(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startPollutionChangeLevelsVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} diedIDsOffset
 */
battlecode.schema.Round.addDiedIDs = function (builder, diedIDsOffset) {
    builder.addFieldOffset(7, diedIDsOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createDiedIDsVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addInt32(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startDiedIDsVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} actionIDsOffset
 */
battlecode.schema.Round.addActionIDs = function (builder, actionIDsOffset) {
    builder.addFieldOffset(8, actionIDsOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createActionIDsVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addInt32(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startActionIDsVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} actionsOffset
 */
battlecode.schema.Round.addActions = function (builder, actionsOffset) {
    builder.addFieldOffset(9, actionsOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<battlecode.schema.Action>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createActionsVector = function (builder, data) {
    builder.startVector(1, data.length, 1);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addInt8(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startActionsVector = function (builder, numElems) {
    builder.startVector(1, numElems, 1);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} actionTargetsOffset
 */
battlecode.schema.Round.addActionTargets = function (builder, actionTargetsOffset) {
    builder.addFieldOffset(10, actionTargetsOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createActionTargetsVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addInt32(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startActionTargetsVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} logsOffset
 */
battlecode.schema.Round.addLogs = function (builder, logsOffset) {
    builder.addFieldOffset(11, logsOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} poolOffset
 */
battlecode.schema.Round.addPool = function (builder, poolOffset) {
    builder.addFieldOffset(12, poolOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createPoolVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addOffset(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startPoolVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} roundID
 */
battlecode.schema.Round.addRoundID = function (builder, roundID) {
    builder.addFieldInt32(13, roundID, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} bytecodeIDsOffset
 */
battlecode.schema.Round.addBytecodeIDs = function (builder, bytecodeIDsOffset) {
    builder.addFieldOffset(14, bytecodeIDsOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createBytecodeIDsVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addInt32(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startBytecodeIDsVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} bytecodesUsedOffset
 */
battlecode.schema.Round.addBytecodesUsed = function (builder, bytecodesUsedOffset) {
    builder.addFieldOffset(15, bytecodesUsedOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createBytecodesUsedVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addInt32(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Round.startBytecodesUsedVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.endRound = function (builder) {
    var offset = builder.endObject();
    return offset;
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} teamIDsOffset
 * @param {flatbuffers.Offset} teamSoupOffset
 * @param {flatbuffers.Offset} movedIDsOffset
 * @param {flatbuffers.Offset} movedLocsOffset
 * @param {flatbuffers.Offset} spawnedBodiesOffset
 * @param {flatbuffers.Offset} pollutionChangedLocsOffset
 * @param {flatbuffers.Offset} pollutionChangeLevelsOffset
 * @param {flatbuffers.Offset} diedIDsOffset
 * @param {flatbuffers.Offset} actionIDsOffset
 * @param {flatbuffers.Offset} actionsOffset
 * @param {flatbuffers.Offset} actionTargetsOffset
 * @param {flatbuffers.Offset} logsOffset
 * @param {flatbuffers.Offset} poolOffset
 * @param {number} roundID
 * @param {flatbuffers.Offset} bytecodeIDsOffset
 * @param {flatbuffers.Offset} bytecodesUsedOffset
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Round.createRound = function (builder, teamIDsOffset, teamSoupOffset, movedIDsOffset, movedLocsOffset, spawnedBodiesOffset, pollutionChangedLocsOffset, pollutionChangeLevelsOffset, diedIDsOffset, actionIDsOffset, actionsOffset, actionTargetsOffset, logsOffset, poolOffset, roundID, bytecodeIDsOffset, bytecodesUsedOffset) {
    battlecode.schema.Round.startRound(builder);
    battlecode.schema.Round.addTeamIDs(builder, teamIDsOffset);
    battlecode.schema.Round.addTeamSoup(builder, teamSoupOffset);
    battlecode.schema.Round.addMovedIDs(builder, movedIDsOffset);
    battlecode.schema.Round.addMovedLocs(builder, movedLocsOffset);
    battlecode.schema.Round.addSpawnedBodies(builder, spawnedBodiesOffset);
    battlecode.schema.Round.addPollutionChangedLocs(builder, pollutionChangedLocsOffset);
    battlecode.schema.Round.addPollutionChangeLevels(builder, pollutionChangeLevelsOffset);
    battlecode.schema.Round.addDiedIDs(builder, diedIDsOffset);
    battlecode.schema.Round.addActionIDs(builder, actionIDsOffset);
    battlecode.schema.Round.addActions(builder, actionsOffset);
    battlecode.schema.Round.addActionTargets(builder, actionTargetsOffset);
    battlecode.schema.Round.addLogs(builder, logsOffset);
    battlecode.schema.Round.addPool(builder, poolOffset);
    battlecode.schema.Round.addRoundID(builder, roundID);
    battlecode.schema.Round.addBytecodeIDs(builder, bytecodeIDsOffset);
    battlecode.schema.Round.addBytecodesUsed(builder, bytecodesUsedOffset);
    return battlecode.schema.Round.endRound(builder);
};
/**
 * @constructor
 */
battlecode.schema.Message = function () {
    /**
     * @type {flatbuffers.ByteBuffer}
     */
    this.bb = null;
    /**
     * @type {number}
     */
    this.bb_pos = 0;
};
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.Message}
 */
battlecode.schema.Message.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.Message=} obj
 * @returns {battlecode.schema.Message}
 */
battlecode.schema.Message.getRootAsMessage = function (bb, obj) {
    return (obj || new battlecode.schema.Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.Message=} obj
 * @returns {battlecode.schema.Message}
 */
battlecode.schema.Message.getSizePrefixedRootAsMessage = function (bb, obj) {
    return (obj || new battlecode.schema.Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * The amount a team is paid to send the message.
 *
 * @returns {number}
 */
battlecode.schema.Message.prototype.bid = function () {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};
/**
 * Messages are 10-15 integers.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.Message.prototype.message = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};
/**
 * @returns {number}
 */
battlecode.schema.Message.prototype.messageLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @returns {Int32Array}
 */
battlecode.schema.Message.prototype.messageArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};
/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.Message.startMessage = function (builder) {
    builder.startObject(2);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} bid
 */
battlecode.schema.Message.addBid = function (builder, bid) {
    builder.addFieldInt32(0, bid, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} messageOffset
 */
battlecode.schema.Message.addMessage = function (builder, messageOffset) {
    builder.addFieldOffset(1, messageOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Message.createMessageVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addInt32(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.Message.startMessageVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Message.endMessage = function (builder) {
    var offset = builder.endObject();
    return offset;
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} bid
 * @param {flatbuffers.Offset} messageOffset
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.Message.createMessage = function (builder, bid, messageOffset) {
    battlecode.schema.Message.startMessage(builder);
    battlecode.schema.Message.addBid(builder, bid);
    battlecode.schema.Message.addMessage(builder, messageOffset);
    return battlecode.schema.Message.endMessage(builder);
};
/**
 * Necessary due to flatbuffers requiring unions to be wrapped in tables.
 *
 * @constructor
 */
battlecode.schema.EventWrapper = function () {
    /**
     * @type {flatbuffers.ByteBuffer}
     */
    this.bb = null;
    /**
     * @type {number}
     */
    this.bb_pos = 0;
};
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.EventWrapper}
 */
battlecode.schema.EventWrapper.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.EventWrapper=} obj
 * @returns {battlecode.schema.EventWrapper}
 */
battlecode.schema.EventWrapper.getRootAsEventWrapper = function (bb, obj) {
    return (obj || new battlecode.schema.EventWrapper).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.EventWrapper=} obj
 * @returns {battlecode.schema.EventWrapper}
 */
battlecode.schema.EventWrapper.getSizePrefixedRootAsEventWrapper = function (bb, obj) {
    return (obj || new battlecode.schema.EventWrapper).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * @returns {battlecode.schema.Event}
 */
battlecode.schema.EventWrapper.prototype.eType = function () {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? /** @type {battlecode.schema.Event} */ (this.bb.readUint8(this.bb_pos + offset)) : battlecode.schema.Event.NONE;
};
/**
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
battlecode.schema.EventWrapper.prototype.e = function (obj) {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};
/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.EventWrapper.startEventWrapper = function (builder) {
    builder.startObject(2);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {battlecode.schema.Event} eType
 */
battlecode.schema.EventWrapper.addEType = function (builder, eType) {
    builder.addFieldInt8(0, eType, battlecode.schema.Event.NONE);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} eOffset
 */
battlecode.schema.EventWrapper.addE = function (builder, eOffset) {
    builder.addFieldOffset(1, eOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.EventWrapper.endEventWrapper = function (builder) {
    var offset = builder.endObject();
    return offset;
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {battlecode.schema.Event} eType
 * @param {flatbuffers.Offset} eOffset
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.EventWrapper.createEventWrapper = function (builder, eType, eOffset) {
    battlecode.schema.EventWrapper.startEventWrapper(builder);
    battlecode.schema.EventWrapper.addEType(builder, eType);
    battlecode.schema.EventWrapper.addE(builder, eOffset);
    return battlecode.schema.EventWrapper.endEventWrapper(builder);
};
/**
 * If events are not otherwise delimited, this wrapper structure
 * allows a game to be stored in a single buffer.
 * The first event will be a GameHeader; the last event will be a GameFooter.
 * matchHeaders[0] is the index of the 0th match header in the event stream,
 * corresponding to matchFooters[0]. These indices allow quick traversal of
 * the file.
 *
 * @constructor
 */
battlecode.schema.GameWrapper = function () {
    /**
     * @type {flatbuffers.ByteBuffer}
     */
    this.bb = null;
    /**
     * @type {number}
     */
    this.bb_pos = 0;
};
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {battlecode.schema.GameWrapper}
 */
battlecode.schema.GameWrapper.prototype.__init = function (i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.GameWrapper=} obj
 * @returns {battlecode.schema.GameWrapper}
 */
battlecode.schema.GameWrapper.getRootAsGameWrapper = function (bb, obj) {
    return (obj || new battlecode.schema.GameWrapper).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {battlecode.schema.GameWrapper=} obj
 * @returns {battlecode.schema.GameWrapper}
 */
battlecode.schema.GameWrapper.getSizePrefixedRootAsGameWrapper = function (bb, obj) {
    return (obj || new battlecode.schema.GameWrapper).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};
/**
 * The series of events comprising the game.
 *
 * @param {number} index
 * @param {battlecode.schema.EventWrapper=} obj
 * @returns {battlecode.schema.EventWrapper}
 */
battlecode.schema.GameWrapper.prototype.events = function (index, obj) {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? (obj || new battlecode.schema.EventWrapper).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};
/**
 * @returns {number}
 */
battlecode.schema.GameWrapper.prototype.eventsLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * The indices of the headers of the matches, in order.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.GameWrapper.prototype.matchHeaders = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};
/**
 * @returns {number}
 */
battlecode.schema.GameWrapper.prototype.matchHeadersLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @returns {Int32Array}
 */
battlecode.schema.GameWrapper.prototype.matchHeadersArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};
/**
 * The indices of the footers of the matches, in order.
 *
 * @param {number} index
 * @returns {number}
 */
battlecode.schema.GameWrapper.prototype.matchFooters = function (index) {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};
/**
 * @returns {number}
 */
battlecode.schema.GameWrapper.prototype.matchFootersLength = function () {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};
/**
 * @returns {Int32Array}
 */
battlecode.schema.GameWrapper.prototype.matchFootersArray = function () {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};
/**
 * @param {flatbuffers.Builder} builder
 */
battlecode.schema.GameWrapper.startGameWrapper = function (builder) {
    builder.startObject(3);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} eventsOffset
 */
battlecode.schema.GameWrapper.addEvents = function (builder, eventsOffset) {
    builder.addFieldOffset(0, eventsOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameWrapper.createEventsVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addOffset(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.GameWrapper.startEventsVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} matchHeadersOffset
 */
battlecode.schema.GameWrapper.addMatchHeaders = function (builder, matchHeadersOffset) {
    builder.addFieldOffset(1, matchHeadersOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameWrapper.createMatchHeadersVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addInt32(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.GameWrapper.startMatchHeadersVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} matchFootersOffset
 */
battlecode.schema.GameWrapper.addMatchFooters = function (builder, matchFootersOffset) {
    builder.addFieldOffset(2, matchFootersOffset, 0);
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameWrapper.createMatchFootersVector = function (builder, data) {
    builder.startVector(4, data.length, 4);
    for (var i = data.length - 1; i >= 0; i--) {
        builder.addInt32(data[i]);
    }
    return builder.endVector();
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
battlecode.schema.GameWrapper.startMatchFootersVector = function (builder, numElems) {
    builder.startVector(4, numElems, 4);
};
/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameWrapper.endGameWrapper = function (builder) {
    var offset = builder.endObject();
    return offset;
};
/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} eventsOffset
 * @param {flatbuffers.Offset} matchHeadersOffset
 * @param {flatbuffers.Offset} matchFootersOffset
 * @returns {flatbuffers.Offset}
 */
battlecode.schema.GameWrapper.createGameWrapper = function (builder, eventsOffset, matchHeadersOffset, matchFootersOffset) {
    battlecode.schema.GameWrapper.startGameWrapper(builder);
    battlecode.schema.GameWrapper.addEvents(builder, eventsOffset);
    battlecode.schema.GameWrapper.addMatchHeaders(builder, matchHeadersOffset);
    battlecode.schema.GameWrapper.addMatchFooters(builder, matchFootersOffset);
    return battlecode.schema.GameWrapper.endGameWrapper(builder);
};
// Exports for Node.js and RequireJS
this.battlecode = battlecode;
