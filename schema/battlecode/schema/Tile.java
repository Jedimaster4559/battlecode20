// automatically generated by the FlatBuffers compiler, do not modify

package battlecode.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * A tile.
 */
public final class Tile extends Table {
  public static Tile getRootAsTile(ByteBuffer _bb) { return getRootAsTile(_bb, new Tile()); }
  public static Tile getRootAsTile(ByteBuffer _bb, Tile obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Tile __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int dirt() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The water level on the tile (above the dirt).
   */
  public int water() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The polluion level of the tiles.
   */
  public int pollution() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The amount of crude soup to be mined on the tiles.
   */
  public int soup() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createTile(FlatBufferBuilder builder,
      int dirt,
      int water,
      int pollution,
      int soup) {
    builder.startObject(4);
    Tile.addSoup(builder, soup);
    Tile.addPollution(builder, pollution);
    Tile.addWater(builder, water);
    Tile.addDirt(builder, dirt);
    return Tile.endTile(builder);
  }

  public static void startTile(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addDirt(FlatBufferBuilder builder, int dirt) { builder.addInt(0, dirt, 0); }
  public static void addWater(FlatBufferBuilder builder, int water) { builder.addInt(1, water, 0); }
  public static void addPollution(FlatBufferBuilder builder, int pollution) { builder.addInt(2, pollution, 0); }
  public static void addSoup(FlatBufferBuilder builder, int soup) { builder.addInt(3, soup, 0); }
  public static int endTile(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

