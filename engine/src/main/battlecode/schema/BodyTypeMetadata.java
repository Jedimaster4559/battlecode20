// automatically generated by the FlatBuffers compiler, do not modify

package battlecode.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * Metadata about all bodies of a particular type.
 */
public final class BodyTypeMetadata extends Table {
  public static BodyTypeMetadata getRootAsBodyTypeMetadata(ByteBuffer _bb) { return getRootAsBodyTypeMetadata(_bb, new BodyTypeMetadata()); }
  public static BodyTypeMetadata getRootAsBodyTypeMetadata(ByteBuffer _bb, BodyTypeMetadata obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public BodyTypeMetadata __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  /**
   * The relevant type.
   */
  public byte type() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The spawn source.
   */
  public byte spawnSource() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The cost of the type, in soup.
   */
  public int cost() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The maximum amount of dirt the type can carry.
   */
  public int dirtLimit() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The maximum amount of soup the type can carry.
   */
  public int soupLimit() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The number of cooldowns between every two actions, for pollution 0.
   */
  public float actionCooldown() { int o = __offset(14); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * The maximum distance this type can sense other robots.
   */
  public int sensorRadius() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The distance this type pollutes.
   */
  public int pollutionRadius() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The amount of pollution this type creates.
   */
  public int pollutionAmount() { int o = __offset(20); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The amount of global pollution this type creates.
   */
  public int globalPollutionAmount() { int o = __offset(22); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The maximum amount of soup this type processes every turn.
   */
  public int maxSoupProduced() { int o = __offset(24); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The bytecode limit of this type.
   */
  public int bytecodeLimit() { int o = __offset(26); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createBodyTypeMetadata(FlatBufferBuilder builder,
      byte type,
      byte spawnSource,
      int cost,
      int dirtLimit,
      int soupLimit,
      float actionCooldown,
      int sensorRadius,
      int pollutionRadius,
      int pollutionAmount,
      int globalPollutionAmount,
      int maxSoupProduced,
      int bytecodeLimit) {
    builder.startObject(12);
    BodyTypeMetadata.addBytecodeLimit(builder, bytecodeLimit);
    BodyTypeMetadata.addMaxSoupProduced(builder, maxSoupProduced);
    BodyTypeMetadata.addGlobalPollutionAmount(builder, globalPollutionAmount);
    BodyTypeMetadata.addPollutionAmount(builder, pollutionAmount);
    BodyTypeMetadata.addPollutionRadius(builder, pollutionRadius);
    BodyTypeMetadata.addSensorRadius(builder, sensorRadius);
    BodyTypeMetadata.addActionCooldown(builder, actionCooldown);
    BodyTypeMetadata.addSoupLimit(builder, soupLimit);
    BodyTypeMetadata.addDirtLimit(builder, dirtLimit);
    BodyTypeMetadata.addCost(builder, cost);
    BodyTypeMetadata.addSpawnSource(builder, spawnSource);
    BodyTypeMetadata.addType(builder, type);
    return BodyTypeMetadata.endBodyTypeMetadata(builder);
  }

  public static void startBodyTypeMetadata(FlatBufferBuilder builder) { builder.startObject(12); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(0, type, 0); }
  public static void addSpawnSource(FlatBufferBuilder builder, byte spawnSource) { builder.addByte(1, spawnSource, 0); }
  public static void addCost(FlatBufferBuilder builder, int cost) { builder.addInt(2, cost, 0); }
  public static void addDirtLimit(FlatBufferBuilder builder, int dirtLimit) { builder.addInt(3, dirtLimit, 0); }
  public static void addSoupLimit(FlatBufferBuilder builder, int soupLimit) { builder.addInt(4, soupLimit, 0); }
  public static void addActionCooldown(FlatBufferBuilder builder, float actionCooldown) { builder.addFloat(5, actionCooldown, 0.0f); }
  public static void addSensorRadius(FlatBufferBuilder builder, int sensorRadius) { builder.addInt(6, sensorRadius, 0); }
  public static void addPollutionRadius(FlatBufferBuilder builder, int pollutionRadius) { builder.addInt(7, pollutionRadius, 0); }
  public static void addPollutionAmount(FlatBufferBuilder builder, int pollutionAmount) { builder.addInt(8, pollutionAmount, 0); }
  public static void addGlobalPollutionAmount(FlatBufferBuilder builder, int globalPollutionAmount) { builder.addInt(9, globalPollutionAmount, 0); }
  public static void addMaxSoupProduced(FlatBufferBuilder builder, int maxSoupProduced) { builder.addInt(10, maxSoupProduced, 0); }
  public static void addBytecodeLimit(FlatBufferBuilder builder, int bytecodeLimit) { builder.addInt(11, bytecodeLimit, 0); }
  public static int endBodyTypeMetadata(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

